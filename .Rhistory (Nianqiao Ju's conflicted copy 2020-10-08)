llik_df[irow,1] <- 2;
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
result_ <- sis_apf(y, dgp_config, pf_config);
llik_df[irow,1] <- 3;
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
if(irow %% 100 ==0) cat("[",irow, "out of", df_length, "experiments done]\n");
}
}
head(llik_df);
library(agents)
rm(list = ls());
load("figures/section3/data_setup_hetero.RData");
library(agents)
## compute the backward information filter
dgp_config$policy <- sis_backward_information_filter_sumbin(y,dgp_config);
## setup particle filter
pf_config <- list(num_particles = 10,
ess_threshold = 0.5,
save_particles = FALSE,
clock = TRUE,
save_genealogy = FALSE,
verbose = FALSE);
## for different values of P, repeat the particle filters num_repeat times
# num_particles_list <- 2**c(6,7,8,9,10);
# num_repeats <- 100;
num_particles_list <- 2**c(2,3);
num_repeats <- 10;
df_length <- length(num_particles_list) * num_repeats * 3;
llik_df <- data.frame(method = integer(df_length),
nparticles = integer(df_length),
irep = integer(df_length),
logz = double(df_length),
time = double(df_length));
irow <- 1
for(p in num_particles_list){
pf_config$num_particles <- p;
for(irep in 1 : num_repeats){
result_ <- sis_csmc(y, dgp_config, pf_config);
llik_df[irow,1] <- 1;
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
result_ <- sis_bpf(y, dgp_config, pf_config);
llik_df[irow,1] <- 2;
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
result_ <- sis_apf(y, dgp_config, pf_config);
llik_df[irow,1] <- 3;
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
if(irow %% 100 ==0) cat("[",irow, "out of", df_length, "experiments done]\n");
}
}
head(llik_df);
tail(llik_df)
rm(list = ls());
load("figures/section3/data_setup_hetero.RData");
library(agents)
## compute the backward information filter
dgp_config$policy <- sis_backward_information_filter_sumbin(y,dgp_config);
## setup particle filter
pf_config <- list(num_particles = 10,
ess_threshold = 0.5,
save_particles = FALSE,
clock = TRUE,
save_genealogy = FALSE,
verbose = FALSE);
# for different values of P, repeat the particle filters num_repeat times
num_particles_list <- 2**c(6,7,8,9,10);
num_repeats <- 100;
# num_particles_list <- 2**c(2,3); ## DEBUG
# num_repeats <- 10; ## DEBUG
df_length <- length(num_particles_list) * num_repeats * 3;
llik_df <- data.frame(method = integer(df_length),
nparticles = integer(df_length),
irep = integer(df_length),
logz = double(df_length),
time = double(df_length));
irow <- 1
for(p in num_particles_list){
pf_config$num_particles <- p;
for(irep in 1 : num_repeats){
result_ <- sis_csmc(y, dgp_config, pf_config);
llik_df[irow,1] <- 1;
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
result_ <- sis_bpf(y, dgp_config, pf_config);
llik_df[irow,1] <- 2;
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
result_ <- sis_apf(y, dgp_config, pf_config);
llik_df[irow,1] <- 3;
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
if(irow %% 100 ==0) cat("[",irow, "out of", df_length, "experiments done]\n");
}
}
head(llik_df);
dim(llik_df)
df_length
irep
?character
character([1])
character(1)
character(2)
character(3)
temp <- character(3)
temp[1]
temp[1] <- "csmc"
temp
rm(list = ls());
load("figures/section3/data_setup_hetero.RData");
library(agents)
## compute the backward information filter
dgp_config$policy <- sis_backward_information_filter_sumbin(y,dgp_config);
## setup particle filter
pf_config <- list(num_particles = 10,
ess_threshold = 0.5,
save_particles = FALSE,
clock = TRUE,
save_genealogy = FALSE,
verbose = FALSE);
# for different values of P, repeat the particle filters num_repeat times
num_particles_list <- 2**c(6,7,8,9,10);
num_repeats <- 100;
# num_particles_list <- 2**c(2,3); ## DEBUG
# num_repeats <- 10; ## DEBUG
df_length <- length(num_particles_list) * num_repeats * 3;
llik_df <- data.frame(method = character(df_length),
nparticles = integer(df_length),
irep = integer(df_length),
logz = double(df_length),
time = double(df_length));
irow <- 1
for(p in num_particles_list){
pf_config$num_particles <- p;
for(irep in 1 : num_repeats){
result_ <- sis_csmc(y, dgp_config, pf_config);
llik_df[irow,1] <- "csmc";
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
result_ <- sis_bpf(y, dgp_config, pf_config);
llik_df[irow,1] <- "bpf";
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
result_ <- sis_apf(y, dgp_config, pf_config);
llik_df[irow,1] <- "apf";
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
if(irow %% 100 ==0) cat("[",irow, "out of", df_length, "experiments done]\n");
}
}
head(llik_df);
rm(list = ls());
load("figures/section3/data_setup_hetero.RData");
library(agents)
## compute the backward information filter
dgp_config$policy <- sis_backward_information_filter_sumbin(y,dgp_config);
## setup particle filter
pf_config <- list(num_particles = 10,
ess_threshold = 0.5,
save_particles = FALSE,
clock = TRUE,
save_genealogy = FALSE,
verbose = FALSE);
# for different values of P, repeat the particle filters num_repeat times
num_particles_list <- 2**c(6,7,8,9,10);
num_repeats <- 100;
# num_particles_list <- 2**c(2,3); ## DEBUG
# num_repeats <- 10; ## DEBUG
df_length <- length(num_particles_list) * num_repeats * 3;
llik_df <- data.frame(method = character(df_length),
nparticles = integer(df_length),
irep = integer(df_length),
logz = double(df_length),
time = double(df_length));
irow <- 1
for(p in num_particles_list){
pf_config$num_particles <- p;
for(irep in 1 : num_repeats){
result_ <- sis_csmc(y, dgp_config, pf_config);
llik_df[irow,1] <- "csmc";
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
result_ <- sis_bpf(y, dgp_config, pf_config);
llik_df[irow,1] <- "bpf";
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
result_ <- sis_apf(y, dgp_config, pf_config);
llik_df[irow,1] <- "apf";
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
if(irow %% 100 ==0) cat("[",irow, "out of", df_length, "experiments done]\n");
}
}
head(llik_df);
library(agents)
rm(list = ls());
load("figures/section3/data_setup_hetero.RData");
library(agents)
## compute the backward information filter
dgp_config$policy <- sis_backward_information_filter_sumbin(y,dgp_config);
## setup particle filter
pf_config <- list(num_particles = 10,
ess_threshold = 0.5,
save_particles = FALSE,
clock = TRUE,
save_genealogy = FALSE,
verbose = FALSE);
# for different values of P, repeat the particle filters num_repeat times
num_particles_list <- 2**c(6,7,8,9,10);
num_repeats <- 100;
# num_particles_list <- 2**c(2,3); ## DEBUG
# num_repeats <- 10; ## DEBUG
df_length <- length(num_particles_list) * num_repeats * 3;
llik_df <- data.frame(method = character(df_length),
nparticles = integer(df_length),
irep = integer(df_length),
logz = double(df_length),
time = double(df_length));
irow <- 1
llik_df[irow,1] <- "csmc";
rm(list = ls());
load("figures/section3/data_setup_hetero.RData");
library(agents)
## compute the backward information filter
dgp_config$policy <- sis_backward_information_filter_sumbin(y,dgp_config);
## setup particle filter
pf_config <- list(num_particles = 10,
ess_threshold = 0.5,
save_particles = FALSE,
clock = TRUE,
save_genealogy = FALSE,
verbose = FALSE);
# for different values of P, repeat the particle filters num_repeat times
num_particles_list <- 2**c(6,7,8,9,10);
num_repeats <- 100;
# num_particles_list <- 2**c(2,3); ## DEBUG
# num_repeats <- 10; ## DEBUG
df_length <- length(num_particles_list) * num_repeats * 3;
llik_df <- data.frame(method = factor(character(df_length), levels = c("csmc","apf","bpf")),
nparticles = integer(df_length),
irep = integer(df_length),
logz = double(df_length),
time = double(df_length));
irow <- 1
llik_df[irow,1] <- "csmc";
head(llik_df)
irow <- irow + 1;
llik_df[irow,1] <- "bpf";
irow <- irow + 1;
llik_df[irow,1] <- "apf";
head(llik_df);
rm(list = ls());
load("figures/section3/data_setup_hetero.RData");
library(agents)
## compute the backward information filter
dgp_config$policy <- sis_backward_information_filter_sumbin(y,dgp_config);
## setup particle filter
pf_config <- list(num_particles = 10,
ess_threshold = 0.5,
save_particles = FALSE,
clock = TRUE,
save_genealogy = FALSE,
verbose = FALSE);
# for different values of P, repeat the particle filters num_repeat times
num_particles_list <- 2**c(6,7,8,9,10);
num_repeats <- 100;
# num_particles_list <- 2**c(2,3); ## DEBUG
# num_repeats <- 10; ## DEBUG
df_length <- length(num_particles_list) * num_repeats * 3;
llik_df <- data.frame(method = factor(character(df_length), levels = c("csmc","apf","bpf")),
nparticles = integer(df_length),
irep = integer(df_length),
logz = double(df_length),
time = double(df_length));
irow <- 1
for(p in num_particles_list){
pf_config$num_particles <- p;
for(irep in 1 : num_repeats){
result_ <- sis_csmc(y, dgp_config, pf_config);
llik_df[irow,1] <- "csmc";
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
result_ <- sis_bpf(y, dgp_config, pf_config);
llik_df[irow,1] <- "bpf";
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
result_ <- sis_apf(y, dgp_config, pf_config);
llik_df[irow,1] <- "apf";
llik_df[irow,2] <- p;
llik_df[irow,3] <- irep;
llik_df[irow,4] <- result_$log_final_likelihood;
llik_df[irow,5] <- result_$totaltime;
irow <- irow + 1;
if(irow %% 100 ==0) cat("[",irow, "out of", df_length, "experiments done]\n");
}
}
head(llik_df);
save.image("figures/section3/data_repeat_zhat.RData")
rm(list = ls())
library(ggplot2)
load("figures/section3/data_repeat_zhat.RData")
library(ggplot2)
rm(list = ls())
load("figures/section3/data_repeat_zhat.RData")
library(ggplot2)
library(dplyr)
cost_p <- ggplot(data = llik_df, aes(x = cost, group = method)) + geom_histogram()
cost_p
cost_p <- ggplot(data = llik_df, aes(x = time, group = method)) + geom_histogram()
cost_p
cost_p <- ggplot(data = llik_df, aes(x = time, group = method)) + geom_histogram() + facet_grid( . ~ method)
cost_p
logzhat_p <- ggplot(data = llik_df, aes(x = logz)) + geom_histogram() + facet_grid(nparticles ~ method)
logzhat_p
variance_summary <- llik_df %>% group_by(method, nparticles) %>% summarise(variance = var(logz))
variance_summary
variance_summary <- llik_df %>% group_by(method, nparticles) %>% summarise(variance = var(logz), cost = mean(time()))
variance_summary <- llik_df %>% group_by(method, nparticles) %>% summarise(variance = var(logz), cost = mean(time))
variance_summary
### there is an outliner in time for apf
iapf <- which.max(llik_df$time)
llik_df[iapf,]
#### THIS IS DANGEROUS
apf_1024 <- subset(llik_df, (method == "apf") & (npartidcles == 1024))
#### THIS IS DANGEROUS
apf_1024 <- subset(llik_df, (method == "apf") & (nparticles == 1024))
apf_1024
outliner_index <- which.max(apf_1024$time)
outliner_index
apf_1024[outliner_index,]
llik_df[iapf,]
rm(list = ls())
load("figures/section3/data_repeat_zhat.RData")
library(ggplot2)
library(dplyr)
### there is an outliner in time for apf
iapf <- which.max(llik_df$time)
llik_df[iapf,]
#### THIS IS DANGEROUS
apf_1024 <- subset(llik_df, (method == "apf") & (nparticles == 1024))
apf_1024
outliner_index <- which.max(apf_1024$time)
apf_1024[outliner_index,4] <- mean(apf_1024$time[-outliner_index])
cost_p <- ggplot(data = llik_df, aes(x = time, group = method)) + geom_histogram() + facet_grid( . ~ method)
cost_p
rm(list = ls())
load("figures/section3/data_repeat_zhat.RData")
library(ggplot2)
library(dplyr)
### there is an outliner in time for apf
iapf <- which.max(llik_df$time)
llik_df[iapf,]
#### THIS IS DANGEROUS
apf_1024 <- subset(llik_df, (method == "apf") & (nparticles == 1024))
apf_1024
outliner_index <- which.max(apf_1024$time)
llik_df[iapf,4] <- mean(apf_1024$time[-outliner_index])
cost_p <- ggplot(data = llik_df, aes(x = time, group = method)) + geom_histogram() + facet_grid( . ~ method)
cost_p
rm(list = ls())
load("figures/section3/data_repeat_zhat.RData")
library(ggplot2)
library(dplyr)
### there is an outliner in time for apf
iapf <- which.max(llik_df$time)
llik_df[iapf,]
#### THIS IS DANGEROUS
apf_1024 <- subset(llik_df, (method == "apf") & (nparticles == 1024))
apf_1024
outliner_index <- which.max(apf_1024$time)
llik_df[iapf,4] <- mean(apf_1024$time[-outliner_index])
#### THIS IS DANGEROUS
apf_1024 <- subset(llik_df, (method == "apf") & (nparticles == 1024))
apf_1024
llik_df[iapf,]
rm(list = ls())
load("figures/section3/data_repeat_zhat.RData")
library(ggplot2)
library(dplyr)
### there is an outliner in time for apf
iapf <- which.max(llik_df$time)
llik_df[iapf,]
#### THIS IS DANGEROUS
apf_1024 <- subset(llik_df, (method == "apf") & (nparticles == 1024))
apf_1024
outliner_index <- which.max(apf_1024$time)
llik_df[iapf,5] <- mean(apf_1024$time[-outliner_index])
cost_p <- ggplot(data = llik_df, aes(x = time, group = method)) + geom_histogram() + facet_grid( . ~ method)
cost_p
logzhat_p <- ggplot(data = llik_df, aes(x = logz)) + geom_histogram() + facet_grid(nparticles ~ method)
logzhat_p
variance_summary <- llik_df %>% group_by(method, nparticles) %>% summarise(variance = var(logz), cost = mean(time))
variance_summary
?write.table
rm(list = ls())
load("figures/section3/data_repeat_zhat.RData")
library(ggplot2)
library(dplyr)
### there is an outliner in time for apf
iapf <- which.max(llik_df$time)
llik_df[iapf,]
#### THIS IS DANGEROUS
apf_1024 <- subset(llik_df, (method == "apf") & (nparticles == 1024))
apf_1024
outliner_index <- which.max(apf_1024$time)
llik_df[iapf,5] <- mean(apf_1024$time[-outliner_index])
cost_p <- ggplot(data = llik_df, aes(x = time, group = method)) + geom_histogram() + facet_grid( . ~ method)
cost_p
logzhat_p <- ggplot(data = llik_df, aes(x = logz)) + geom_histogram() + facet_grid(nparticles ~ method)
logzhat_p
variance_summary <- llik_df %>% group_by(method, nparticles) %>% summarise(variance = var(logz), cost = mean(time))
variance_summary
write.table(variance_summary, file = "figures/section3/output_variance_logzhat.txt", sep = "\t",
row.names = FALSE, col.names = TRUE)
rm(list = ls())
load("figures/section3/data_repeat_zhat.RData")
library(ggplot2)
library(dplyr)
### there is an outliner in time for apf
iapf <- which.max(llik_df$time)
llik_df[iapf,]
#### THIS IS DANGEROUS
apf_1024 <- subset(llik_df, (method == "apf") & (nparticles == 1024))
apf_1024
outliner_index <- which.max(apf_1024$time)
llik_df[iapf,5] <- mean(apf_1024$time[-outliner_index])
cost_p <- ggplot(data = llik_df, aes(x = time, group = method)) + geom_histogram() + facet_grid( . ~ method)
# cost_p
logzhat_p <- ggplot(data = llik_df, aes(x = logz)) + geom_histogram() + facet_grid(nparticles ~ method)
# logzhat_p
variance_summary <- llik_df %>% group_by(method, nparticles) %>% summarise(variance = var(logz), cost = mean(time))
variance_summary
write.table(variance_summary, file = "figures/section3/output_variance_logzhat.txt", sep = "\t",
row.names = FALSE, col.names = TRUE)
variance_summary %>% mutate(varasymp = variance * cost)
write.table(variance_summary, file = "figures/section3/output_variance_logzhat.txt", sep = "\t",
row.names = FALSE, col.names = TRUE)
variance_summary %>% mutate(varasymp = variance * cost) -> variance_summary
write.table(variance_summary, file = "figures/section3/output_variance_logzhat.txt", sep = "\t",
row.names = FALSE, col.names = TRUE)
rm(list = ls())
load("figures/section3/data_repeat_zhat.RData")
library(ggplot2)
library(dplyr)
### there is an outliner in time for apf
iapf <- which.max(llik_df$time)
llik_df[iapf,]
#### THIS IS DANGEROUS
apf_1024 <- subset(llik_df, (method == "apf") & (nparticles == 1024))
apf_1024
outliner_index <- which.max(apf_1024$time)
llik_df[iapf,5] <- mean(apf_1024$time[-outliner_index])
cost_p <- ggplot(data = llik_df, aes(x = time, group = method)) + geom_histogram() + facet_grid( . ~ method)
# cost_p
logzhat_p <- ggplot(data = llik_df, aes(x = logz)) + geom_histogram() + facet_grid(nparticles ~ method)
# logzhat_p
variance_summary <- llik_df %>% group_by(method, nparticles) %>% summarise(variance = var(logz), cost = mean(time))
variance_summary %>% mutate(inefficiency = variance * cost) -> variance_summary
variance_summary
write.table(variance_summary, file = "figures/section3/output_variance_logzhat.txt", sep = "\t",
row.names = FALSE, col.names = TRUE)
