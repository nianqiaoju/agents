result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
policy
y <- c(0,4,2,0,1,4)
policy <- sir_backward_information_filter_sumbin(y, model_config)
particle_config <- list(num_particles = 10,
save_particles = FALSE,
clock = TRUE,
save_genealogy = TRUE,
verbose = FALSE,
exact = TRUE)
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
policy
y <- c(0,4,2,0,1)
policy <- sir_backward_information_filter_sumbin(y, model_config)
policy
result_csmc$logz
result_csmc
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
rm(list = ls())
N <- 4
num_particles <- 50
# features <- matrix(runif(N), nrow = 1, ncol = N)
features <- matrix(1, nrow = 1, ncol = N)
coefficients <- matrix(c(0.2,0.3,0.5), nrow = 1, ncol = 3)
## for calculate beta_0, beta_theta, and beta_gamma using the features and the coefficients
adjacency_matrix_b <- network_fully_connected(N)
adjacency_matrix_b
model_config <- list(N = N,
adjacency_matrix_b = adjacency_matrix_b,
rho = 0.8
)
model_config$alpha0 <- expit(t(coefficients[,1] %*% features))
model_config$lambda <- expit(coefficients[,2] %*% features)
model_config$gamma <- expit(coefficients[,3] %*% features)
print(model_config)
y <- c(0,4,2,0,1)
# xxprev <- c(rep(0,300),rep(1,100),rep(2,100))
# sir_get_alpha(xxprev,model_config)
# sir_logdpoismulti_given_xxprev(xxprev,model_config)
# sir_twisted_kernel(xxprev, 1, 200, model_config)
# sir_twisted_kernel(xxprev, 2, 200, model_config)
# sir_twisted_kernel(xxprev, 150, 150, model_config)
policy <- sir_backward_information_filter_sumbin(y, model_config)
particle_config <- list(num_particles = 10,
save_particles = FALSE,
clock = TRUE,
save_genealogy = TRUE,
verbose = FALSE,
exact = TRUE)
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
result_csmc <- sir_csmc(y, model_config, particle_config, policy)
result_apf <- sir_apf(y, model_config , particle_config)
cat(result_csmc$logz, result_apf$log_final_likelihood,'\n')
all_x_sir(4)
set.seed(2020)
## small population test so that ffbs is feasible
N <- 4
features <- matrix(runif(N), nrow = 1, ncol = N)
coefficients <- matrix(c(0.2,0.3,0.5), nrow = 1, ncol = 3)
## for calculate beta_0, beta_lambda, and beta_gamma using the features and the coefficients
adjacency_matrix_b <- network_fully_connected(N)
library(agents)
set.seed(2020)
## small population test so that ffbs is feasible
N <- 4
features <- matrix(runif(N), nrow = 1, ncol = N)
coefficients <- matrix(c(0.2,0.3,0.5), nrow = 1, ncol = 3)
## for calculate beta_0, beta_lambda, and beta_gamma using the features and the coefficients
adjacency_matrix_b <- network_fully_connected(N)
model_config <- list(N = N,
features = features,
adjacency_matrix_b = adjacency_matrix_b,
rho = 0.8
)
model_config$alpha0 <- expit(t(coefficients[,1] %*% features))
model_config$lambda <- expit(coefficients[,2] %*% features)
model_config$gamma <- expit(coefficients[,3] %*% features)
y <- sis_simulate(5, model_config)$y
# y <- c(2,3,4,1, model_config$N, 0)
cat(y)
lprior <- function(param){
dnorm(param[1],log = TRUE) + dnorm(param[2], log = TRUE) + dnorm(param[3], log = TRUE)
}
num_particles <- 5
particle_config <- list(num_particles = num_particles,
save_particles = FALSE,
clock = TRUE,
save_genealogy = TRUE,
verbose = FALSE,
exact = TRUE)
sis_forward_backward(y, model_config, 0)
sis_forward_backward(y, model_config, 0)$log_marginal_likelihood
library(agents)
set.seed(2020)
## small population test so that ffbs is feasible
N <- 4
features <- matrix(runif(N), nrow = 1, ncol = N)
coefficients <- matrix(c(0.2,0.3,0.5), nrow = 1, ncol = 3)
## for calculate beta_0, beta_lambda, and beta_gamma using the features and the coefficients
adjacency_matrix_b <- network_fully_connected(N)
model_config <- list(N = N,
features = features,
adjacency_matrix_b = adjacency_matrix_b,
rho = 0.8
)
model_config$alpha0 <- expit(t(coefficients[,1] %*% features))
model_config$lambda <- expit(coefficients[,2] %*% features)
model_config$gamma <- expit(coefficients[,3] %*% features)
y <- sis_simulate(5, model_config)$y
# y <- c(2,3,4,1, model_config$N, 0)
cat(y)
lprior <- function(param){
dnorm(param[1],log = TRUE) + dnorm(param[2], log = TRUE) + dnorm(param[3], log = TRUE)
}
num_particles <- 5
particle_config <- list(num_particles = num_particles,
save_particles = FALSE,
clock = TRUE,
save_genealogy = TRUE,
verbose = FALSE,
exact = TRUE)
## proposal kernel with Jacobian adjustment
q <- function(param, step_size){
## returns proposed parameters
z <- step_size * rnorm(4)
proposal <- param
proposal[1:3] <- param[1:3] + z[1:3]
proposal[4] <- unbiasedmcmc::expit(logit(param[4]) + z[4])
return(proposal)
}
ljacobian <- function(param){
return(log(param[4]) + log(1 - param[4]))
}
mh <- function(mcmc_config, method){
print(method)
llik <- function(param){
model_config$alpha0 <- expit(t( param[1]%*% features))
model_config$lambda <- expit(param[2] %*% features)
model_config$gamma <- expit(param[3] %*% features)
model_config$rho <- param[4]
sis_loglikelihood_marginal(y = y,
model_config = model_config,
particle_config = particle_config,
method = method)
}
param_chain <- matrix(NA, ncol = 4, nrow = mcmc_config$num_mcmc)
accept <- rep(0, mcmc_config$num_mcmc)
elapse <- rep(0, mcmc_config$num_mcmc)
## initalize
param <- c(rnorm(3), runif(1))
lpost_current <- llik(param) + lprior(param) + ljacobian(param)
while(is.infinite(lpost_current)){
param <- c(rnorm(3), runif(1))
lpost_current <- llik(param) + lprior(param) + ljacobian(param)
}
## run mcmc chain
for (iter_mcmc in 1 : mcmc_config$num_mcmc){
proposal <- q(param, step_size = mcmc_config$step_size)
lpost_proposal <- lprior(proposal) + llik(proposal) + ljacobian(proposal)
if (!is.na(lpost_proposal)){
if (log(runif(1)) < lpost_proposal - lpost_current){
accept[iter_mcmc] <- 1
param <- proposal
lpost_current <- lpost_proposal
}
}
param_chain[iter_mcmc,] <- param
elapse[iter_mcmc] <- Sys.time()
if(is.infinite(lpost_current)){
break
}
}
return(list(param_chain = param_chain,
method = method,
elapse = elapse[mcmc_config$num_mcmc] - elapse[1],
acceptance = mean(accept)))
}
mcmc_config <- list(num_mcmc = 15000, step_size = 1.5)
result_apf <- mh(mcmc_config,'apf')
set.seed(2020)
## small population test so that ffbs is feasible
N <- 4
state_space <- sis_get_state_space(N)
features <- matrix(runif(N), nrow = 1, ncol = N)
coefficients <- matrix(c(0.2,0.3,0.5), nrow = 1, ncol = 3)
## for calculate beta_0, beta_lambda, and beta_gamma using the features and the coefficients
adjacency_matrix_b <- network_fully_connected(N)
model_config <- list(N = N,
features = features,
adjacency_matrix_b = adjacency_matrix_b,
rho = 0.8
)
model_config$alpha0 <- expit(t(coefficients[,1] %*% features))
model_config$lambda <- expit(coefficients[,2] %*% features)
model_config$gamma <- expit(coefficients[,3] %*% features)
y <- sis_simulate(5, model_config)$y
# y <- c(2,3,4,1, model_config$N, 0)
cat(y)
lprior <- function(param){
dnorm(param[1],log = TRUE) + dnorm(param[2], log = TRUE) + dnorm(param[3], log = TRUE)
}
num_particles <- 5
particle_config <- list(num_particles = num_particles,
save_particles = FALSE,
clock = TRUE,
save_genealogy = TRUE,
verbose = FALSE,
exact = TRUE)
mcmc_config <- list(num_mcmc = 15000, step_size = 1.5)
result_forward <- mh(mcmc_config, 'exact')
result_forward$acceptance
result_apf <- mh(mcmc_config,'apf')
result_apf$aacceptance
result_apf$acceptance
summary(result_apf$param_chain)
summary(result_forward$param_chain)
plot(result_forward$param_chain[,2],result_forward$param_chain[,4])
cov(result_forward$param_chain[,2],result_forward$param_chain[,4] )
cov(result_forward$param_chain[,3],result_forward$param_chain[,4] )
cov(result_forward$param_chain[,1],result_forward$param_chain[,4] )
plot(result_forward$param_chain[,1],result_forward$param_chain[,4])
set.seed(2020)
## small population test so that ffbs is feasible
N <- 4
state_space <- sis_get_state_space(N)
features <- matrix(runif(N), nrow = 1, ncol = N)
coefficients <- matrix(c(-0.2,0.3,0.5), nrow = 1, ncol = 3)
## for calculate beta_0, beta_lambda, and beta_gamma using the features and the coefficients
adjacency_matrix_b <- network_fully_connected(N)
model_config <- list(N = N,
features = features,
adjacency_matrix_b = adjacency_matrix_b,
rho = 0.8
)
model_config$alpha0 <- expit(t(coefficients[,1] %*% features))
model_config$lambda <- expit(coefficients[,2] %*% features)
model_config$gamma <- expit(coefficients[,3] %*% features)
```{r observations}
y <- sis_simulate(5, model_config)$y
# y <- c(2,3,4,1, model_config$N, 0)
cat(y)
model_config$alpha0
model_config$lambda
model_config$gamma
dim(model_config$alpha0)
dim(model_config$alpha0)
dim(model_config$lambda)
set.seed(2020)
## small population test so that ffbs is feasible
N <- 4
state_space <- sis_get_state_space(N)
features <- matrix(runif(N), nrow = 1, ncol = N)
coefficients <- matrix(c(-0.2,0.3,0.5), nrow = 1, ncol = 3)
## for calculate beta_0, beta_lambda, and beta_gamma using the features and the coefficients
adjacency_matrix_b <- network_fully_connected(N)
model_config <- list(N = N,
features = features,
adjacency_matrix_b = adjacency_matrix_b,
rho = 0.8
)
model_config$alpha0 <- as.vector(expit(coefficients[,1] %*% features))
model_config$lambda <- as.vector(expit(coefficients[,2] %*% features))
model_config$gamma <- as.vector(expit(coefficients[,3] %*% features))
model_config$alpha0
set.seed(2020)
## small population test so that ffbs is feasible
N <- 4
state_space <- sis_get_state_space(N)
features <- matrix(runif(N), nrow = 1, ncol = N)
coefficients <- matrix(c(-0.2,0.3,0.5), nrow = 1, ncol = 3)
## for calculate beta_0, beta_lambda, and beta_gamma using the features and the coefficients
adjacency_matrix_b <- network_fully_connected(N)
model_config <- list(N = N,
features = features,
adjacency_matrix_b = adjacency_matrix_b,
rho = 0.8
)
model_config$alpha0 <- as.vector(expit(coefficients[,1] %*% features))
model_config$lambda <- as.vector(expit(coefficients[,2] %*% features))
model_config$gamma <- as.vector(expit(coefficients[,3] %*% features))
y <- sis_simulate(5, model_config)$y
# y <- c(2,3,4,1, model_config$N, 0)
cat(y)
lprior <- function(param){
dnorm(param[1],log = TRUE) + dnorm(param[2], log = TRUE) + dnorm(param[3], log = TRUE)
}
num_particles <- 5
particle_config <- list(num_particles = num_particles,
save_particles = FALSE,
clock = FALSE,
save_genealogy = FALSE,
verbose = FALSE,
exact = TRUE)
## proposal kernel with Jacobian adjustment
q <- function(param, step_size){
## returns proposed parameters
z <- step_size * rnorm(4)
proposal <- param
proposal[1:3] <- param[1:3] + z[1:3]
proposal[4] <- unbiasedmcmc::expit(logit(param[4]) + z[4])
return(proposal)
}
ljacobian <- function(param){
return(log(param[4]) + log(1 - param[4]))
}
mh <- function(mcmc_config, method){
print(method)
llik <- function(param){
model_config$alpha0 <- as.vector(expit(param[1] %*% features))
model_config$lambda <- as.vector(expit(param[2]  %*% features))
model_config$gamma <- as.vector(expit(param[3]  %*% features))
model_config$rho <- param[4]
sis_loglikelihood_marginal(y = y,
model_config = model_config,
particle_config = particle_config,
method = method)
}
param_chain <- matrix(NA, ncol = 4, nrow = mcmc_config$num_mcmc)
accept <- rep(0, mcmc_config$num_mcmc)
elapse <- rep(0, mcmc_config$num_mcmc)
## initalize
param <- c(rnorm(3), runif(1))
lpost_current <- llik(param) + lprior(param) + ljacobian(param)
while(is.infinite(lpost_current)){
param <- c(rnorm(3), runif(1))
lpost_current <- llik(param) + lprior(param) + ljacobian(param)
}
## run mcmc chain
for (iter_mcmc in 1 : mcmc_config$num_mcmc){
proposal <- q(param, step_size = mcmc_config$step_size)
lpost_proposal <- lprior(proposal) + llik(proposal) + ljacobian(proposal)
if (!is.na(lpost_proposal)){
if (log(runif(1)) < lpost_proposal - lpost_current){
accept[iter_mcmc] <- 1
param <- proposal
lpost_current <- lpost_proposal
}
}
param_chain[iter_mcmc,] <- param
elapse[iter_mcmc] <- Sys.time()
if(is.infinite(lpost_current)){
break
}
}
return(list(param_chain = param_chain,
method = method,
elapse = elapse[mcmc_config$num_mcmc] - elapse[1],
acceptance = mean(accept)))
}
mcmc_config <- list(num_mcmc = 15000, step_size = 1.5)
result_apf <- mh(mcmc_config,'apf')
result_forward <- mh(mcmc_config, 'exact')
summary(result_forward$param_chain)
summary(result_apf$param_chain)
apply(result_apf$param_chain, 2, var)
apply(result_forward$param_chain, 2, var)
apply(result_forward$param_chain, 2, mean)
apply(result_apf$param_chain, 2, mean)
plot(result_apf$param_chain[,1], result_apf$param_chain[,4])
plot(result_apf$param_chain[,2], result_apf$param_chain[,4])
plot(result_apf$param_chain[,3], result_apf$param_chain[,4])
model_config$alpha0
as.vector(expit(coefficients[,1] %*% features))
exact_llik <- sis_loglikelihood_marginal(y, model_config, NULL, 'exact')
exact_llik
apf_llik <- sis_loglikelihood_marginal(y, model_config, particle_config, 'apf')
apf_llik
apf_llik <- replicate(100,sis_loglikelihood_marginal(y, model_config, particle_config, 'apf'))
sum((apf_llik - exact_llik)**2)
exact_llik <- sis_loglikelihood_marginal(y, model_config, NULL, 'exact')
apf_llik <- replicate(100,sis_loglikelihood_marginal(y, model_config, particle_config, 'apf'))
cat("[variance of log(Z_hat) by APF:", sum((exact_llik - apf_llik)**2), "\n]")
exact_llik <- sis_loglikelihood_marginal(y, model_config, NULL, 'exact')
apf_llik <- replicate(100,sis_loglikelihood_marginal(y, model_config, particle_config, 'apf'))
cat("[variance of log(Z_hat) by APF:", sum((exact_llik - apf_llik)**2), "]\n")
exact_llik <- sis_loglikelihood_marginal(y, model_config, NULL, 'exact')
apf_llik <- replicate(100,sis_loglikelihood_marginal(y, model_config, particle_config, 'apf'))
cat("[variance of log(Z_hat) by APF:", sum((exact_llik - apf_llik)**2), "]\n")
exact_llik <- sis_loglikelihood_marginal(y, model_config, NULL, 'exact')
apf_llik <- replicate(100,sis_loglikelihood_marginal(y, model_config, particle_config, 'apf'))
cat("[variance of log(Z_hat) by APF:", sum((exact_llik - apf_llik)**2), "]\n")
exact_llik <- sis_loglikelihood_marginal(y, model_config, NULL, 'exact')
apf_llik <- replicate(100,sis_loglikelihood_marginal(y, model_config, particle_config, 'apf'))
cat("[variance of log(Z_hat) by APF:", sum((exact_llik - apf_llik)**2), "]\n")
num_particles <- 10
particle_config <- list(num_particles = num_particles,
save_particles = FALSE,
clock = FALSE,
save_genealogy = FALSE,
verbose = FALSE,
exact = TRUE)
exact_llik <- sis_loglikelihood_marginal(y, model_config, NULL, 'exact')
apf_llik <- replicate(100,sis_loglikelihood_marginal(y, model_config, particle_config, 'apf'))
cat("[variance of log(Z_hat) by APF:", sum((exact_llik - apf_llik)**2), "]\n")
num_particles <- 15
particle_config <- list(num_particles = num_particles,
save_particles = FALSE,
clock = FALSE,
save_genealogy = FALSE,
verbose = FALSE,
exact = TRUE)
exact_llik <- sis_loglikelihood_marginal(y, model_config, NULL, 'exact')
apf_llik <- replicate(100,sis_loglikelihood_marginal(y, model_config, particle_config, 'apf'))
cat("[variance of log(Z_hat) by APF:", sum((exact_llik - apf_llik)**2), "]\n")
result_forward$acceptance
mcmc_config <- list(num_mcmc = 10**4, step_size = 1.5)
result_forward <- mh(mcmc_config, 'exact')
cat("[MH acceptance rate:" , 100 * result_forward$acceptance, "%, with stepsize = ", mcmc_config$step_size, "]\n")
